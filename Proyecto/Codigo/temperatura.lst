CCS PCH C Compiler, Version 4.104, 5967               07-jul.-20 01:43

               Filename: C:\Users\Hugo Andres MM\Desktop\Cuarentena\INSTRUMENTACIÓN\Proyecto\Codigo\temperatura.lst

               ROM used: 1818 bytes (6%)
                         Largest free fragment is 30950
               RAM used: 11 (1%) at main() level
                         25 (1%) worst case
               Stack:    6 locations

*
0000:  GOTO   05D8
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device ADC=10  
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES NOMCLR INTRC_IO   
....................  
.................... #use delay(internal=8000000) 
*
0056:  CLRF   FEA
0058:  MOVLW  0B
005A:  MOVWF  FE9
005C:  MOVF   FEF,W
005E:  BZ    007A
0060:  MOVLW  02
0062:  MOVWF  01
0064:  CLRF   00
0066:  DECFSZ 00,F
0068:  BRA    0066
006A:  DECFSZ 01,F
006C:  BRA    0064
006E:  MOVLW  97
0070:  MOVWF  00
0072:  DECFSZ 00,F
0074:  BRA    0072
0076:  DECFSZ FEF,F
0078:  BRA    0060
007A:  RETLW  00
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                     The following have special meaning:               //// 
.................... ////                      \f  Clear display                                //// 
.................... ////                      \n  Go to start of second line                   //// 
.................... ////                      \b  Move back one position                       //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
00A2:  MOVLW  0F
00A4:  ANDWF  F95,W
00A6:  IORLW  F0
00A8:  MOVWF  F95
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00AA:  BSF    F8C.2
....................    delay_cycles(1); 
00AC:  NOP   
....................    lcd_output_enable(1); 
00AE:  BSF    F8C.0
....................    delay_cycles(1); 
00B0:  NOP   
....................    high = lcd_read_nibble(); 
00B2:  RCALL  0096
00B4:  MOVFF  01,12
....................        
....................    lcd_output_enable(0); 
00B8:  BCF    F8C.0
....................    delay_cycles(1); 
00BA:  NOP   
....................    lcd_output_enable(1); 
00BC:  BSF    F8C.0
....................    delay_us(1); 
00BE:  BRA    00C0
....................    low = lcd_read_nibble(); 
00C0:  RCALL  0096
00C2:  MOVFF  01,11
....................        
....................    lcd_output_enable(0); 
00C6:  BCF    F8C.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00C8:  MOVLW  0F
00CA:  ANDWF  F95,W
00CC:  MOVWF  F95
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00CE:  SWAPF  12,W
00D0:  MOVWF  00
00D2:  MOVLW  F0
00D4:  ANDWF  00,F
00D6:  MOVF   00,W
00D8:  IORWF  11,W
00DA:  MOVWF  01
.................... } 
00DC:  GOTO   00E4 (RETURN)
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0096:  MOVF   F83,W
0098:  MOVWF  00
009A:  SWAPF  00,W
009C:  ANDLW  0F
009E:  MOVWF  01
....................   #endif 
.................... } 
00A0:  RETLW  00
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
007C:  SWAPF  12,W
007E:  ANDLW  F0
0080:  MOVWF  00
0082:  MOVLW  0F
0084:  ANDWF  F8C,W
0086:  IORWF  00,W
0088:  MOVWF  F8C
....................   #endif 
....................        
....................    delay_cycles(1); 
008A:  NOP   
....................    lcd_output_enable(1); 
008C:  BSF    F8C.0
....................    delay_us(2); 
008E:  BRA    0090
0090:  BRA    0092
....................    lcd_output_enable(0); 
0092:  BCF    F8C.0
.................... } 
0094:  RETLW  00
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................    lcd_output_rs(0); 
*
00E0:  BCF    F8C.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
00E2:  BRA    00A2
00E4:  MOVFF  01,11
00E8:  BTFSC  01.7
00EA:  BRA    00E2
....................    lcd_output_rs(address); 
00EC:  BCF    F8C.1
00EE:  BTFSC  0F.0
00F0:  BSF    F8C.1
....................    delay_cycles(1); 
00F2:  NOP   
....................    lcd_output_rw(0); 
00F4:  BCF    F8C.2
....................    delay_cycles(1); 
00F6:  NOP   
....................    lcd_output_enable(0); 
00F8:  BCF    F8C.0
....................    lcd_send_nibble(n >> 4); 
00FA:  SWAPF  10,W
00FC:  MOVWF  11
00FE:  MOVLW  0F
0100:  ANDWF  11,F
0102:  MOVFF  11,12
0106:  RCALL  007C
....................    lcd_send_nibble(n & 0xf); 
0108:  MOVF   10,W
010A:  ANDLW  0F
010C:  MOVWF  11
010E:  MOVWF  12
0110:  RCALL  007C
.................... } 
0112:  RETLW  00
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0114:  MOVLW  0F
0116:  ANDWF  F95,W
0118:  MOVWF  F95
....................   #endif 
....................    lcd_enable_tris(); 
011A:  BCF    F95.0
....................    lcd_rs_tris(); 
011C:  BCF    F95.1
....................    lcd_rw_tris(); 
011E:  BCF    F95.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0120:  BCF    F8C.1
....................    lcd_output_rw(0); 
0122:  BCF    F8C.2
....................    lcd_output_enable(0); 
0124:  BCF    F8C.0
....................      
....................    delay_ms(15); 
0126:  MOVLW  0F
0128:  MOVWF  0B
012A:  RCALL  0056
....................    for(i=1;i<=3;++i) 
012C:  MOVLW  01
012E:  MOVWF  07
0130:  MOVF   07,W
0132:  SUBLW  03
0134:  BNC   0146
....................    { 
....................        lcd_send_nibble(3); 
0136:  MOVLW  03
0138:  MOVWF  12
013A:  RCALL  007C
....................        delay_ms(5); 
013C:  MOVLW  05
013E:  MOVWF  0B
0140:  RCALL  0056
....................    } 
0142:  INCF   07,F
0144:  BRA    0130
....................      
....................    lcd_send_nibble(2); 
0146:  MOVLW  02
0148:  MOVWF  12
014A:  RCALL  007C
....................    for(i=0;i<=3;++i) 
014C:  CLRF   07
014E:  MOVF   07,W
0150:  SUBLW  03
0152:  BNC   0170
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0154:  CLRF   03
0156:  MOVF   07,W
0158:  MOVFF  FF2,08
015C:  BCF    FF2.7
015E:  RCALL  0004
0160:  BTFSC  08.7
0162:  BSF    FF2.7
0164:  MOVWF  08
0166:  CLRF   0F
0168:  MOVWF  10
016A:  RCALL  00E0
016C:  INCF   07,F
016E:  BRA    014E
.................... } 
0170:  GOTO   0608 (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
04CC:  DECFSZ 0C,W
04CE:  BRA    04D2
04D0:  BRA    04D8
....................       address=LCD_LINE_TWO; 
04D2:  MOVLW  40
04D4:  MOVWF  0D
....................    else 
04D6:  BRA    04DA
....................       address=0; 
04D8:  CLRF   0D
....................       
....................    address+=x-1; 
04DA:  MOVLW  01
04DC:  SUBWF  0B,W
04DE:  ADDWF  0D,F
....................    lcd_send_byte(0,0x80|address); 
04E0:  MOVF   0D,W
04E2:  IORLW  80
04E4:  MOVWF  0E
04E6:  CLRF   0F
04E8:  MOVWF  10
04EA:  RCALL  00E0
.................... } 
04EC:  RETLW  00
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
04EE:  MOVF   0A,W
04F0:  XORLW  0C
04F2:  BZ    04FE
04F4:  XORLW  06
04F6:  BZ    050E
04F8:  XORLW  02
04FA:  BZ    051A
04FC:  BRA    0524
....................       case '\f'   :  lcd_send_byte(0,1); 
04FE:  CLRF   0F
0500:  MOVLW  01
0502:  MOVWF  10
0504:  RCALL  00E0
....................                      delay_ms(2); 
0506:  MOVLW  02
0508:  MOVWF  0B
050A:  RCALL  0056
....................                      break; 
050C:  BRA    0530
....................                       
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
050E:  MOVLW  01
0510:  MOVWF  0B
0512:  MOVLW  02
0514:  MOVWF  0C
0516:  RCALL  04CC
0518:  BRA    0530
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
051A:  CLRF   0F
051C:  MOVLW  10
051E:  MOVWF  10
0520:  RCALL  00E0
0522:  BRA    0530
....................       
....................       default     : lcd_send_byte(1,c);     break; 
0524:  MOVLW  01
0526:  MOVWF  0F
0528:  MOVFF  0A,10
052C:  RCALL  00E0
052E:  BRA    0530
....................    } 
.................... } 
0530:  RETLW  00
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1) 
....................  
.................... int16 lecturadigital = 0;   // int16 lecturadigital; 
.................... int8 temp = 0; 
....................  
.................... void main() 
.................... { 
*
05D8:  CLRF   FF8
05DA:  BCF    FD0.7
05DC:  CLRF   FEA
05DE:  CLRF   FE9
05E0:  MOVLW  70
05E2:  MOVWF  FD3
05E4:  MOVF   FD3,W
05E6:  BCF    FB8.3
05E8:  MOVLW  0C
05EA:  MOVWF  FAF
05EC:  MOVLW  A2
05EE:  MOVWF  FAC
05F0:  MOVLW  90
05F2:  MOVWF  FAB
05F4:  CLRF   05
05F6:  CLRF   04
05F8:  CLRF   06
05FA:  MOVF   FC1,W
05FC:  ANDLW  C0
05FE:  IORLW  0F
0600:  MOVWF  FC1
0602:  MOVLW  07
0604:  MOVWF  FB4
....................    lcd_init();  
0606:  BRA    0114
....................     
....................    setup_adc_ports(AN0); 
0608:  MOVF   FC1,W
060A:  ANDLW  C0
060C:  IORLW  0E
060E:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_8); 
0610:  BSF    FC0.0
0612:  BCF    FC0.1
0614:  BCF    FC0.2
0616:  BSF    FC0.7
0618:  BSF    FC2.0
....................     
....................    while(TRUE) 
....................    {  
....................     set_adc_channel(0); //Seleccionar Canal 0 para leer el pot 
061A:  MOVLW  00
061C:  MOVWF  01
061E:  MOVF   FC2,W
0620:  ANDLW  C3
0622:  IORWF  01,W
0624:  MOVWF  FC2
....................     delay_us(20); 
0626:  MOVLW  0D
0628:  MOVWF  00
062A:  DECFSZ 00,F
062C:  BRA    062A
....................      
....................     lecturadigital=read_adc();  // es una funcion que el valor analogico  y convertirlo a digital con un resolucion de 10 bits 
062E:  BSF    FC2.1
0630:  BTFSC  FC2.1
0632:  BRA    0630
0634:  MOVFF  FC3,04
0638:  MOVFF  FC4,05
....................      
....................     temp=(float)lecturadigital*500/1023;  // voltaje=(lecturadigital*5.0)/1023.0; 
063C:  MOVFF  05,08
0640:  MOVFF  04,07
0644:  BRA    0174
0646:  MOVFF  00,07
064A:  MOVFF  01,08
064E:  MOVFF  02,09
0652:  MOVFF  03,0A
0656:  MOVFF  03,0E
065A:  MOVFF  02,0D
065E:  MOVFF  01,0C
0662:  MOVFF  00,0B
0666:  CLRF   12
0668:  CLRF   11
066A:  MOVLW  7A
066C:  MOVWF  10
066E:  MOVLW  87
0670:  MOVWF  0F
0672:  BRA    01AC
0674:  MOVFF  00,07
0678:  MOVFF  01,08
067C:  MOVFF  02,09
0680:  MOVFF  03,0A
0684:  MOVFF  03,0E
0688:  MOVFF  02,0D
068C:  MOVFF  01,0C
0690:  MOVFF  00,0B
0694:  CLRF   12
0696:  MOVLW  C0
0698:  MOVWF  11
069A:  MOVLW  7F
069C:  MOVWF  10
069E:  MOVLW  88
06A0:  MOVWF  0F
06A2:  BRA    02A0
06A4:  MOVFF  03,0A
06A8:  MOVFF  02,09
06AC:  MOVFF  01,08
06B0:  MOVFF  00,07
06B4:  BRA    03FC
06B6:  MOVFF  01,06
....................      
....................     printf("%u\n",temp);  
06BA:  MOVFF  06,07
06BE:  MOVLW  1B
06C0:  MOVWF  08
06C2:  BRA    045E
06C4:  MOVLW  0A
06C6:  BTFSS  F9E.4
06C8:  BRA    06C6
06CA:  MOVWF  FAD
....................     lcd_gotoxy(1,1); 
06CC:  MOVLW  01
06CE:  MOVWF  0B
06D0:  MOVWF  0C
06D2:  RCALL  04CC
....................      
....................     if(temp<101 && temp>=0) 
06D4:  MOVF   06,W
06D6:  SUBLW  64
06D8:  BNC   0702
....................       printf(lcd_putc,"La temperatura \n es:   %u   C",temp); 
06DA:  MOVLW  18
06DC:  MOVWF  FF6
06DE:  MOVLW  00
06E0:  MOVWF  FF7
06E2:  MOVLW  17
06E4:  MOVWF  07
06E6:  RCALL  0532
06E8:  MOVFF  06,07
06EC:  MOVLW  1B
06EE:  MOVWF  08
06F0:  BRA    0550
06F2:  MOVLW  31
06F4:  MOVWF  FF6
06F6:  MOVLW  00
06F8:  MOVWF  FF7
06FA:  MOVLW  04
06FC:  MOVWF  07
06FE:  RCALL  0532
....................     else 
0700:  BRA    070C
....................       printf(lcd_putc, "La Temperatura \n es invalida");  
0702:  MOVLW  36
0704:  MOVWF  FF6
0706:  MOVLW  00
0708:  MOVWF  FF7
070A:  RCALL  05B8
....................    } 
070C:  BRA    061A
.................... LCD_PUTC("\f"); 
070E:  MOVLW  54
0710:  MOVWF  FF6
0712:  MOVLW  00
0714:  MOVWF  FF7
0716:  RCALL  05B8
.................... } 
....................  
0718:  SLEEP 

Configuration Fuses:
   Word  1: C83F   INTRC_IO IESO FCMEN PLL12 CPUDIV4 USBDIV
   Word  2: 0E38   NOBROWNOUT WDT128 NOWDT BORV20 PUT VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
